--- a/apt_toolkit/cli.py
+++ b/apt_toolkit/cli.py
@@ -9,6 +9,7 @@ from .exploit_intel import ExploitDBIndex, ExploitDBNotAvailableError
 from .offensive_playbooks import generate_offensive_playbook
 from .initial_access import (
     SpearPhishingGenerator, 
     SupplyChainCompromise,
     analyze_spear_phishing_campaign
@@ -17,6 +18,15 @@ from .persistence import PersistenceManager, generate_persistence_report
 from .privilege_escalation import PrivilegeEscalator, analyze_privilege_escalation_landscape
 from .defense_evasion import DefenseEvader, analyze_defense_evasion_landscape
 from .lateral_movement import LateralMover, analyze_lateral_movement_campaign
 from .command_control import C2Communicator, analyze_c2_infrastructure
 from .exfiltration import DataExfiltrator, analyze_exfiltration_campaign
+
+# Chinese APT campaign imports
+try:
+    from campaigns.chinese_apts.chinese_apt_orchestrator import (
+        ChineseAPTCampaignOrchestrator, ChineseAPTCampaignConfig
+    )
+    CHINESE_APT_SUPPORT = True
except ImportError:
+    CHINESE_APT_SUPPORT = False
 
 
 def main():
@@ -39,6 +49,7 @@ def main():
   apt-analyzer exfiltration --find-data
   apt-analyzer campaign --domain secure.dod.mil --seed 1337
   apt-analyzer exploitdb --search exchange --limit 5
+  apt-analyzer chinese-apt --campaign apt41_gaming --domain target.corp
         """
     )
     
@@ -146,6 +157,32 @@ def main():
         action,
         choices=["targets"],
         help="Run american targets reconnaissance",
     )
 
+    # Chinese APT campaigns subparser
+    if CHINESE_APT_SUPPORT:
+        chinese_parser = subparsers.add_parser(
+            "chinese-apt",
+            help="Chinese APT campaign simulations (APT41, APT1, APT10, APT12)",
+        )
+        chinese_parser.add_argument(
+            "--campaign",
+            choices=[
+                "apt41_gaming", "apt41_supply_chain",
+                "apt1_government", "apt1_long_term",
+                "apt10_msp", "apt10_cloud",
+                "apt12_diplomatic", "apt12_strategic",
+                "comparative"
+            ],
+            help="Specific Chinese APT campaign type to simulate",
+        )
+        chinese_parser.add_argument(
+            "--domain",
+            default="secure.dod.mil",
+            help="Target domain for campaign simulation",
+        )
+        chinese_parser.add_argument(
+            "--seed",
+            type=int,
+            help="Seed random number generation for deterministic output",
+        )
+
     # Common arguments
     for subparser in [
         ia_parser,
@@ -155,6 +192,7 @@ def main():
         lm_parser,
         cc_parser,
         ex_parser,
         campaign_parser,
         exploit_parser,
         american_parser,
+        *([chinese_parser] if CHINESE_APT_SUPPORT else []),
     ]:
         subparser.add_argument("--json", action="store_true", help="Output as JSON")
     
@@ -279,6 +317,25 @@ def handle_command(args) -> dict:
         simulator = APTCampaignSimulator(seed=args.seed)
         return {"campaign_report": simulator.simulate(config)}
 
+    elif args.module == "chinese-apt" and CHINESE_APT_SUPPORT:
+        if not args.campaign:
+            orchestrator = ChineseAPTCampaignOrchestrator(seed=args.seed)
+            return {
+                "available_campaigns": orchestrator.get_available_campaign_types(),
+                "chinese_apt_overview": orchestrator._get_chinese_apt_overview()
+            }
+        
+        config = ChineseAPTCampaignConfig(
+            target_domain=args.domain,
+            seed=args.seed
+        )
+        orchestrator = ChineseAPTCampaignOrchestrator(seed=args.seed)
+        
+        if args.campaign == "comparative":
+            return orchestrator.run_comparative_analysis(config)
+        else:
+            return orchestrator.simulate_specific_campaign_type(args.campaign, config)
+
     elif args.module == "exploitdb":
         index = ExploitDBIndex()
         
@@ -313,6 +370,9 @@ def handle_command(args) -> dict:
     elif args.module == "american":
         if args.action == "targets":
             return {"american_targets": analyze_american_targets()}
+    
+    elif args.module == "chinese-apt" and not CHINESE_APT_SUPPORT:
+        return {"error": "Chinese APT campaign support not available"}
 
     return {"error": f"Unknown module or action: {args.module}"}
 
@@ -323,4 +383,4 @@ def print_pretty_result(result):
 
 if __name__ == "__main__":  # pragma: no cover
     sys.exit(main())